#include<bits/stdc++.h>
using namespace std;
#define int long long
#define F first
#define S second
#define INF 100000000007
int n;
vector<vector<int>> capacity;
vector<vector<int>> adj;

int bfs(int s, int t, vector<int>& parent) {
    fill(parent.begin(), parent.end(), -1);
    parent[s] = -2;
    queue<pair<int, int>> q;
    q.push({s, INF});
    while (!q.empty()) {
        int cur = q.front().first;
        int flow = q.front().second;
        q.pop();

        for (int next : adj[cur]) {
            if (parent[next] == -1 && capacity[cur][next]) {
                parent[next] = cur;
                int new_flow = min(flow, capacity[cur][next]);
                if (next == t){
                    return new_flow;
                }
                q.push({next, new_flow});
            }
        }
    }
    return 0;
}

int maxflow(int s, int t) {
    int flow = 0;
    vector<int> parent(n);
    int new_flow;
    while (new_flow = bfs(s, t, parent)) {
        flow += new_flow;
        int cur = t;
        while (cur != s) {
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow;
            cur = prev;
        }
    }
    return flow;
}

void solve(){
    cin>>n;
    adj.clear();
    capacity.clear();
    adj.resize(n);
    capacity.resize(n);
    for(int i=0;i<n;i++){
        capacity[i].resize(n);
    }
    int s,t,c; cin>>s>>t>>c; s--,t--;
    for(int i=0;i<c;i++){
        int u,v,cc; cin>>u>>v>>cc;
        u--,v--;
        adj[u].push_back(v);
        adj[v].push_back(u);
        capacity[u][v]+=cc;
        capacity[v][u]+=cc;
    }
    cout<<maxflow(s,t)<<"\n";
}
int32_t main() {
    //ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
    int t=1;
    cin>>t;
    for(int it=1;it<=t;it++){
        cout<<"Case "<<it<<": "; //cout<<'\n';
        solve();
    }
    return 0;
}
// Complexity O(VE^2)
